#ifndef _MYTERM_H_
#define _MYTERM_H_
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <vector>
#include<cmath>
#include <algorithm>


using namespace std;
class myPolynomial;
class myTerm{
public:
  myTerm(int c = 0, unsigned e = 0);
  // copy constructor
  myTerm(const myTerm &term);
  // overloaded operators
  bool operator == (const myTerm& term) const;
  bool operator != (const myTerm& term) const;
  bool operator < (const myTerm& term) const;
  myTerm operator - () const;
  // accessor functions
  int getCoeff() const {
    return coeff;
  }
  unsigned getExp() const {
    return exp;
  }
  // mutator functions
  void setCoeff(int c) {
    coeff = c;
  }
  void setExp(unsigned e) {
    exp = e;
  }
  // member functions
  myTerm ddx() const; // derivative of a term
  // friend functions and classes
  friend ostream& operator <<(ostream &outStream, const myTerm& term);
  friend myPolynomial;
private:
  int coeff; // integer coefficient
  unsigned exp; // exponent (non-negative integer)
};
#endif _MYTERM_H_

// Constructor
myTerm::myTerm(int c, unsigned e) : coeff(c), exp(e){}
// copy constructor
myTerm::myTerm(const myTerm &term) : coeff(term.coeff), exp(term.exp){}
// overloaded operators
bool myTerm::operator == (const myTerm& term) const{
  return ((this->coeff == term.coeff) && (this->exp == term.exp));
}
// overloaded operators
bool myTerm::operator != (const myTerm& term) const{
  return ((this->coeff != term.coeff) || (this->exp != term.exp));
}
// overloaded operators

bool myTerm::operator < (const myTerm& term) const{
  return (this->exp > term.exp) ;
}
bool Sorting(myTerm p1, myTerm p2){
  return p1 < p2;
}
myTerm myTerm::operator - () const{
  return myTerm(-coeff,exp);
}
// derivative of a term
myTerm myTerm::ddx() const{
  if (exp == 0)
    return myTerm(0, 0);
  return myTerm(exp*coeff, exp-1);
}
// output operator
ostream& operator <<(ostream &outStream, const myTerm& term){
  if (term.exp == 0)
  if (term.coeff == 0) // nothing to output
    return outStream;
  else
    return outStream << term.coeff;
  if (term.coeff == 1)
    outStream << "x";
  else if (term.coeff == -1)
    outStream << "-x";
  else
    outStream << term.coeff << "x";
  if (term.exp == 1)
    return outStream;
  else
    return outStream << "^" << term.exp;
}

class myPolynomial{
public:
  myPolynomial(int c = 0, unsigned e = 0);
  myPolynomial(int nTerms, int mono[]);
  // copy constructor
  myPolynomial(const myPolynomial &poly);
  // overloaded operators
  bool operator == (const myPolynomial &poly) const;
  bool operator != (const myPolynomial &poly) const;
  myPolynomial& operator = (const myPolynomial &poly);
  myPolynomial& operator += (const myPolynomial &poly);
  myPolynomial& operator -= (const myPolynomial &poly);
  myPolynomial& operator *= (const myPolynomial &poly);
  myPolynomial& operator *= (int k);
  myPolynomial operator -() const;
  myPolynomial operator *(int k) const;
  myPolynomial operator +(const myPolynomial &poly) const;
  myPolynomial operator -(const myPolynomial &poly) const;
  myPolynomial operator *(const myPolynomial &poly) const;
  long operator() (int x) const; // evaluate the polynomial
  int getDegree() const; // get a degree of the polynomial
  //void setCoeff(int c);
  unsigned getNumTerms() const; // number of terms in the polynomial
  myPolynomial ddx() const; // derivative of a polynomial
  // friend operators and functions
  friend myPolynomial operator *(int k, const myPolynomial &poly);
  friend ostream& operator <<(ostream &outStream, const myPolynomial &poly);
  static const myPolynomial ZERO; // P(x) = 0
  static const myPolynomial ONE; // P(x) = 1
  static const myPolynomial X; // P(x) = x
private:
  int degree; // maximum expnent
  int NumTerms;
  vector<myTerm> p;
 /********************* add your code here ********************************/
};

myPolynomial::myPolynomial(int c, unsigned e){
  p.push_back(myTerm(c,e));
}
myPolynomial::myPolynomial(int nTerms, int mono[]){
  for(int i=0;i<nTerms;i++)
    p.push_back(myTerm(mono[2*i],mono[2*i+1]));
  sort(p.begin(), p.end(), Sorting);
  degree = p[0].exp;
}
// copy constructor
myPolynomial::myPolynomial(const myPolynomial &poly){
  degree = poly.degree;
  NumTerms = poly.NumTerms;
  p = poly.p;
}
// overloaded operators
bool myPolynomial::operator == (const myPolynomial &poly) const{
  return (this->p==poly.p);
}
bool myPolynomial::operator != (const myPolynomial &poly) const{
  return (this->p!=poly.p);
}
myPolynomial& myPolynomial::operator = (const myPolynomial &poly){
  this->p=poly.p;
  return *this;
}
myPolynomial& myPolynomial::operator += (const myPolynomial &poly){
  vector<myTerm> p2=this->p;
  for (int j=0; j<poly.p.size() ; j++)
    p2.push_back(poly.p[j]);
  sort(p2.begin(), p2.end(), Sorting);
    for (int i=0; i<p2.size()-1 ; ){
      if (p2[i].exp == p2[i+1].exp){
        p2[i].coeff +=p2[i+1].coeff;
        p2.erase(p2.begin()+(i+1));
      }
      else{ ++i; }
    }
    this->p=p2;
  for ( int i=0; i < this->p.size(); ) {
      if (this->p[i].getCoeff()==0) {
      this->p.erase(this->p.begin() + i);
    }
    else {
      i++;
    }
  }
  if (this->p.size()==0) return *this = myPolynomial::ZERO;

  return *this;
}
myPolynomial& myPolynomial::operator -= (const myPolynomial &poly){
  vector<myTerm> p2=this->p;
  for (int j=0; j<poly.p.size() ; j++)
    p2.push_back(-poly.p[j]);
  sort(p2.begin(), p2.end(), Sorting);
    for (int i=0; i<p2.size()-1 ; ){
      if (p2[i].exp == p2[i+1].exp){
        p2[i].coeff +=p2[i+1].coeff;
        p2.erase(p2.begin()+(i+1));
      }
      else{ ++i; }
    }
    this->p=p2;
  for ( int i=0; i < this->p.size(); ) {
      if (this->p[i].getCoeff()==0) {
      this->p.erase(this->p.begin() + i);
    }
    else {
      i++;
    }
  }
  if (this->p.size()==0) return *this = myPolynomial::ZERO;

  return *this;
}
myPolynomial& myPolynomial::operator *= (const myPolynomial &poly){
  vector<myTerm> p2;
  for (int j=0; j<poly.p.size() ; j++){
    for (int i=0; i<this->p.size() ; i++){
        p2.push_back(myTerm(this->p[i].coeff * poly.p[j].coeff,this->p[i].exp+poly.p[j].exp));
    }
  }
  sort(p2.begin(), p2.end(), Sorting);
    for (int i=0; i<p2.size()-1 ; ){
      if (p2[i].exp == p2[i+1].exp){
        p2[i].coeff +=p2[i+1].coeff;
        p2.erase(p2.begin()+(i+1));
      }
      else{ ++i; }
    }
  this->p=p2;

  return *this;
}
myPolynomial& myPolynomial::operator *= (int k){
  if ((k==0)||(*this == myPolynomial::ZERO)){
  (*this=myPolynomial::ZERO);
  return *this;
}

  for (int i=0; i<p.size(); i++)
    this->p[i].coeff *= k;
  return *this;
}
myPolynomial myPolynomial::operator -() const{
  myPolynomial p1 = *this;
  for (int i=0; i<p1.p.size(); i++)
    p1.p[i].coeff *= -1;
  sort(p1.p.begin(), p1.p.end(), Sorting);

  return p1;
}
myPolynomial myPolynomial::operator *(int k) const{
  myPolynomial p1 = *this;
  if ((k==0)||(*this==myPolynomial::ZERO)){
    return 0;
  }
  for (int i=0; i<p.size(); i++)
    p1.p[i].coeff *= k;
  return p1;
}
myPolynomial myPolynomial::operator +(const myPolynomial &poly) const{
  myPolynomial p1 = *this;
  vector<myTerm> p2 = p1.p;
  for (int j=0; j<poly.p.size() ; j++)
    p2.push_back(poly.p[j]);
  sort(p2.begin(), p2.end(), Sorting);
    for (int i=0; i<p2.size()-1 ; ){
      if (p2[i].exp == p2[i+1].exp){
        p2[i].coeff +=p2[i+1].coeff;
        p2.erase(p2.begin()+(i+1));
      }
      else{ ++i; }
    }
  p1.p=p2;
  for ( int i=0; i < p1.p.size(); ) {
      if (p1.p[i].getCoeff()==0) {
      p1.p.erase(p1.p.begin() + i);
    }
    else {
      i++;
    }
  }
  if (p1.p.size()==0) return 0;

  return p1;
}
myPolynomial myPolynomial::operator -(const myPolynomial &poly) const{
  myPolynomial p1 = *this;
  vector<myTerm> p2 = p1.p;
  for (int j=0; j<poly.p.size() ; j++)
    p2.push_back(-poly.p[j]);
  sort(p2.begin(), p2.end(), Sorting);
    for (int i=0; i<p2.size()-1 ; ){
      if (p2[i].exp == p2[i+1].exp){
        p2[i].coeff +=p2[i+1].coeff;
        p2.erase(p2.begin()+(i+1));
      }
      else{ ++i; }
    }
  p1.p=p2;
  for ( int i=0; i < p1.p.size(); ) {
      if (p1.p[i].getCoeff()==0) {
      p1.p.erase(p1.p.begin() + i);
    }
    else {
      i++;
    }
  }
  if (p1.p.size()==0) return 0;

  return p1;
}
myPolynomial myPolynomial::operator *(const myPolynomial &poly) const{
  myPolynomial p1 = *this;
  vector<myTerm> p2;
  for (int j=0; j<poly.p.size() ; j++){
    for (int i=0; i<p1.p.size() ; i++){
        p2.push_back(myTerm(p1.p[i].coeff * poly.p[j].coeff,p1.p[i].exp+poly.p[j].exp));
    }
  }
  sort(p2.begin(), p2.end(), Sorting);
    for (int i=0; i<p2.size()-1 ; ){
      if (p2[i].exp == p2[i+1].exp){
        p2[i].coeff +=p2[i+1].coeff;
        p2.erase(p2.begin()+(i+1));
      }
      else{ ++i; }
    }
  p1.p=p2;

  return p1;
}
long myPolynomial::operator() (int x) const{
  int result=0;
  for (int i=0; i<p.size(); i++){
    result += p[i].coeff*pow(x,p[i].exp);
  }
  return result;

} // evaluate the polynomial

int myPolynomial::getDegree() const{
  if (degree==0) return -1;
  return degree;
} // get a degree of the polynomial

//void myPolynomial::setCoeff(int c){}

unsigned myPolynomial::getNumTerms() const{
  return p.size();
}// number of terms in the polynomial
myPolynomial myPolynomial::ddx() const{
  myPolynomial p2 = *this;
  vector<myTerm> p1;
  for (int i=0; i<p2.p.size(); i++)
  p1.push_back(myTerm(p2.p[i].ddx()));
  p2.p=p1;
  for ( int i=0; i < p2.p.size(); ) {
      if (p2.p[i].getCoeff()==0) {
      p2.p.erase(p2.p.begin() + i);
    }
    else {
      i++;
    }
  }
  if (p2.p.size()==0) return 0;
  return p2;
} // derivative of a polynomial
// friend operators and functions
myPolynomial operator *(int k, const myPolynomial &poly){
  myPolynomial p1 = poly;
  vector<myTerm> p2;
  if ((k==0)||(poly == myPolynomial::ZERO)) return myPolynomial::ZERO;
  for (int i=0; i<p1.p.size(); i++)
    p2.push_back(myTerm(poly.p[i].getCoeff()*k , poly.p[i].getExp()));
  p1.p=p2;
  return p1;
}

// output operator
ostream& operator <<(ostream &outStream, const myPolynomial& poly){
  if (poly == myPolynomial::ZERO)
    return outStream << 0;
  else if (poly == myPolynomial::ONE)
    return outStream<<1;
  else if (poly == myPolynomial::X)
    return outStream<<"x";
  for (int i=0; i<poly.p.size(); i++){
    if ((i!=0)&&(poly.p[i].getCoeff()>0))
      outStream <<"+";
    if (poly.p[i].getExp()==0){
      outStream<<poly.p[i].getCoeff();
    }
    else {
      if (poly.p[i].getCoeff() == -1)
        outStream << "-x";
      else if (poly.p[i].getCoeff() == 1)
        outStream <<"x";
      else outStream << poly.p[i].getCoeff()<<"x";
      if (poly.p[i].getExp() !=1)
        outStream<<"^"<<poly.p[i].getExp();
    }
  }

  return outStream;
}
const myPolynomial myPolynomial::ZERO(0); // the zero polynomial P(x) = 0
const myPolynomial myPolynomial::ONE(1, (unsigned)0); // the monomial P(x) = 1
const myPolynomial myPolynomial::X(1, 1); // the monomial P(x) = x

void testSimpleCase();
void testDataFromFile();
int main(void){
  testSimpleCase();
  testDataFromFile();
}
void testSimpleCase(){
 // test static variables
  cout << myPolynomial::ZERO << endl;
  cout << myPolynomial::ONE << endl;
  cout << myPolynomial::X << endl;
  myPolynomial p0, p1(1), p2(1, 1), p3(3, 5);
  int testData4[10] = {1, 0, 1, 1, 1, 2, 1, 3, 1, 4};
  int testData5[10] = {-1, 0, -1, 1, -1, 2, -1, 3, -1, 4};
  int testData6[10] = {1, 0, -1, 1, 1, 2, -1, 3, 1, 4};
  int testData7[10] = {2, 2, 5, 5, 4, 4, 1, 1, 3, 3};
  int testData8[12] = {1, 1000000000, 1, 100000000, 1, 1000000, 1, 10000, 1, 100, 1, 0};
  myPolynomial p4(5, testData4);
  myPolynomial p5(5, testData5);
  myPolynomial p6(5, testData6);
  myPolynomial p7(5, testData7);
  myPolynomial p8(6, testData8);
  myPolynomial p9(p7);
  // test constructor
  cout << p0 << endl << p1 << endl << p2 << endl;
  cout << p4 << endl << p8 << endl;
  // test copy constructor
  cout << p9 << endl;
  // test accessor function
  cout << p8.getDegree() << " " << p8.getNumTerms() << endl;
  // test evaluation function
  cout << p1(2) << " " << p2(2) << " " << p3(2) << " " << p4(2) << " " << endl;
  cout << p5(3) << " " << p6(3) << " " << p7(3) << " " << p9(3) << " " << endl;
  // test comparison operators
  cout << (p7 == p9) << " " << (p7 != p9) << endl;
  // test derivative function
  cout << myPolynomial::ZERO.ddx() << endl;
  cout << myPolynomial::ONE.ddx() << endl;
  cout << myPolynomial::X.ddx() << endl;
  cout << p4.ddx() << endl;
  cout << p8.ddx() << endl;
  // test unary operator -
  cout << -myPolynomial::ZERO << endl;
  cout << -p4 << endl;
  // test k*p(x) or p(x) * k
  cout << 3*myPolynomial::ZERO << endl;
  cout << 3*myPolynomial::ONE << endl;
  cout << myPolynomial::X*3 << endl;
  cout << 3*p4 << " " << p4*3 << endl;
  cout << 0*p5 << " " << p5*5 << endl;
  // test binary operator +
  cout << p4 + p5 << endl;
  // test binary operator -
  cout << p6 - p7 << endl;
  // test binary operator *
  cout << p8 * p9 << endl;
  myPolynomial tmp1(p4), tmp2, tmp3, tmp4;
  tmp4 = tmp3 = tmp2 = tmp1;
  cout << (tmp1 += p5) << endl;
  cout << (tmp2 -= p5) << endl;
  cout << (tmp3 *= p5) << endl;
  cout << (tmp4 *= 3) << endl;
}
void testDataFromFile(){
  ifstream inStream;
  int numTestCases;
  inStream.open("input.txt");
  if (inStream.fail()){
    cerr << "Input file opening failed.\n";
    exit(1);
  }
  inStream >> numTestCases;
  for (int i=0; i<numTestCases; i++){
    int numTerms, terms[100];
    /* read first polynomial */
    inStream >> numTerms;
    for (int j=0; j<numTerms; j++)
      inStream >> terms[2*j] >> terms[2*j+1];
    myPolynomial p1(numTerms, terms);
    /* read second polynomial */
    inStream >> numTerms;
    for (int j=0; j<numTerms; j++)
      inStream >> terms[2*j] >> terms[2*j+1];
    myPolynomial p2(numTerms, terms);
    cout << p1 << endl << p2 << endl;
    cout << p1.getDegree() << " " << p2.getNumTerms() << endl;
    cout << p1.ddx() << endl << p2.ddx() << endl;
    cout << (p1 == p2) << " " << (p1 != p2) << endl;
    cout << p1(1) << endl;
    cout << -p1 + p1 * 2 * p2 - p2 * 2 + 3 * p1 << endl;
    myPolynomial p3(myPolynomial::ZERO), p4(myPolynomial::ONE), p5(myPolynomial::X);
    p3 += p1;
    p4 -= p2;
    p5 *= p4;
    p5 *= 2;
    cout << p5 << endl;
  }
  inStream.close();
}
