#ifndef _MYRATIONAL_H_
#define _MYRATIONAL_H_
#include <iostream>
#include <fstream>
#include <cstdlib>
using namespace std;

class myRational
{
private:
 // 분수는 항상 내부적으로 기약분수로 표현하며, 또한 항상 _den>0 이다.
 long _num; // numerator
 long _den; // denominator
 long gcd(long m, long n) const; // 최대공약수
 void reduce();
public:
  myRational(long num = 0, long den=1);
  myRational(const myRational& rat);
  // Accessor functions (접근자)
  long getNumerator() const;
  long getDenominator() const;

  myRational reciprocal() const;
  // Overloaded binary operators
  myRational operator +(const myRational& rat) const;
  myRational operator +(int value) const;
  myRational operator -(const myRational& rat) const;
  myRational operator -(int value) const;
  myRational operator *(const myRational& rat) const;
  myRational operator *(int value) const;
  myRational operator /(const myRational& rat) const;
  myRational operator /(int value) const;
  // Overloaded assignment operators
  myRational& operator =(const myRational& rat);
  myRational& operator =(int value);
  myRational& operator *=(const myRational& rat);
  myRational& operator *=(int value);
  myRational& operator +=(const myRational& rat);
  myRational& operator +=(int value);
  myRational& operator -=(const myRational& rat);
  myRational& operator -=(int value);
  myRational& operator /=(const myRational& rat);
  myRational& operator /=(int value);
  // Overloading relational operators
  bool operator ==(const myRational& rat) const;
  bool operator !=(const myRational& rat) const;
  bool operator >(const myRational& rat) const;
  bool operator >=(const myRational& rat) const;
  bool operator <(const myRational& rat) const;
  bool operator <=(const myRational& rat) const;

  friend myRational operator +(int value, const myRational& rat);
  friend myRational operator -(int value, const myRational& rat);
  friend myRational operator *(int value, const myRational& rat);
  friend myRational operator /(int value, const myRational& rat);

  friend ostream &operator <<(ostream &outStream, const myRational& rat);
  friend istream &operator >>(istream &inStream, myRational& rat);
  // Overloaded unary operators
  myRational operator -(); // unary minus
  myRational operator ++(int);
  myRational& operator ++();
  myRational operator --(int);
  myRational& operator --();
};
#endif

ostream &operator <<(ostream &outStream, const myRational& r)
{
 if (r._num == 0)
 outStream << 0;
 else if (r._den == 1)
 outStream << r._num;
 else
 outStream << r._num << "/" << r._den;
 return outStream;
}
istream &operator >>(istream &inStream, myRational& r)
{
 inStream >> r._num >> r._den;
 if (r._den == 0)
 {
 r._num = 0;
 r._den = 1;
 }
 r.reduce();
 return inStream;
}
long myRational::gcd(long m, long n) const
{
 if (m == n)
 return n;
 else if (m < n)
 return gcd(m, n-m);
 else
 return gcd(m-n, n);
}
void myRational::reduce(){ //기약분수로  만들
 if (_num == 0 || _den == 0){
 _num = 0;
 _den = 1;
 return;
 }
 if (_den < 0){
 _den *= -1;
 _num *= -1;
 }
 if (_num == 1) return;
 int sgn = (_num < 0 ? -1 : 1);
 long g = gcd(sgn * _num, _den);
 _num /= g;
 _den /= g;
}

myRational::myRational(long num, long den){
  _num=num;
  _den=den;
  reduce();
}
myRational::myRational(const myRational& rat){
  _num=rat._num;
  _den=rat._den;
  reduce();
}
// Accessor functions (접근자)
long myRational::getNumerator() const{
  return _num;
}
long myRational::getDenominator() const{
  return _den;
}

myRational myRational::reciprocal() const{
  return myRational(_den,_num);
}
// Overloaded binary operators
myRational myRational::operator +(const myRational& rat) const{
  long newDen= this->_den * rat._den;
  long newNum= this->_num * rat._den + rat._num * this->_den;
  myRational r = myRational(newNum, newDen);
  r.reduce();
  return r;
}
myRational myRational::operator +(int value) const{
  long newNum=value * this->_den + this->_num;
  myRational r = myRational(newNum,this->_den);
  r.reduce();
  return r;
}
myRational myRational::operator -(const myRational& rat) const{
  long newDen= this->_den * rat._den;
  long newNum= this->_num * rat._den - rat._num * this->_den;
  myRational r = myRational(newNum, newDen);
  r.reduce();
  return r;
}
myRational myRational::operator -(int value) const{
  long newNum=this->_num - value * this->_den;
  myRational r = myRational(newNum, this->_den);
  r.reduce();
  return r;
}
myRational myRational::operator *(const myRational& rat) const{
  long newNum = this->_num * rat._num;
  long newDen = this->_den * rat._den;
  myRational r = myRational(newNum, newDen);
  r.reduce();
  return r;
}
myRational myRational::operator *(int value) const{
  long newNum=value * this->_num;
  long newDen=this->_den;
  myRational r = myRational(newNum, newDen);
  r.reduce();
  return r;
}
myRational myRational::operator /(const myRational& rat) const{
  if ( rat._num == 0)
    return 0;
  else {
    myRational r = myRational(this->_num * rat._den, this->_den * rat._num);
    r.reduce();
    return r;
  }
}
myRational myRational::operator /(int value) const{
  myRational r = myRational(this->_num, this->_den * value);
  r.reduce();
  return r;
}
// Overloaded assignment operators
myRational& myRational::operator =(const myRational& rat){
  this->_num = rat._num;
  this->_den = rat._den;
  return *this;
}
myRational& myRational::operator =(int value){
  this->_num=value;
  this->_den=1;
  reduce();
  return *this;
}
myRational& myRational::operator *=(const myRational& rat){
  this->_num = this->_num * rat._num;
  this->_den = this->_den * rat._den;
  reduce();
  return *this;
}
myRational& myRational::operator *=(int value){
  this->_num=value * this->_num;
  reduce();
  return *this;
}
myRational& myRational::operator +=(const myRational& rat){
  this->_num = this->_num * rat._den + rat._num * this->_den;
  this->_den = this->_den * rat._den;
  reduce();
  return *this;
}
myRational& myRational::operator +=(int value){
  this->_num=value * this->_den + this->_num;
  reduce();
  return *this;
}
myRational& myRational::operator -=(const myRational& rat){
  this->_num = this->_num * rat._den - rat._num * this->_den;
  this->_den = this->_den * rat._den;
  reduce();
  return *this;
}
myRational& myRational::operator -=(int value){
  this->_num= this->_num - value * this->_den;
  reduce();
  return *this;
}
myRational& myRational::operator /=(const myRational& rat){
  this->_num = this->_num * rat._den;
  this->_den = this->_den * rat._num;
  reduce();
  return *this;
}
myRational& myRational::operator /=(int value){
  this->_den=this->_den * value;
  reduce();
  return *this;
}
// Overloading relational operators
bool myRational::operator ==(const myRational& rat) const{
  return (_num == rat._num) && (_den == rat._den);
}
bool myRational::operator !=(const myRational& rat) const{
  return (_num != rat._num) || (_den != rat._den);
}
bool myRational::operator >(const myRational& rat) const{
  return (this->_num * rat._den) > (rat._num * this->_den);
}
bool myRational::operator >=(const myRational& rat) const{
  return (this->_num * rat._den) >= (rat._num * this->_den);
}
bool myRational::operator <(const myRational& rat) const{
  return (this->_num * rat._den) < (rat._num * this->_den);
}
bool myRational::operator <=(const myRational& rat) const{
  return (this->_num * rat._den) <= (rat._num * this->_den);
}

myRational operator +(int value, const myRational& rat){
  long newNum=value * rat._den + rat._num;
  return myRational(newNum,rat._den);
}
myRational operator -(int value, const myRational& rat){
  long newNum=value * rat._den - rat._num;
  return myRational(newNum,rat._den);
}
myRational operator *(int value, const myRational& rat){
  return myRational(value * rat._num, rat._den);
}
myRational operator /(int value, const myRational& rat){
  return myRational(rat._den * value, rat._num);
}

// Overloaded unary operators
myRational myRational::operator -(){
  return myRational(-(_num), _den);
}
myRational myRational::operator ++(int){
  myRational r= *this;
  _num +=_den;
  return r;
}
myRational& myRational::operator ++(){
  _num +=_den;
  return (*this);
}
myRational myRational::operator --(int){
  myRational r=*this;
  _num -=_den;
  return r;
}
myRational& myRational::operator --(){
  _num-=_den;
  return (*this);
}

void testSimpleCase();
void testDataFromFile();
void bubbleSort(myRational *arr, int n){
  for (int i=0; i<n;i++){
    myRational temp;
    for (int j=0; j<n-i-1;j++){
      if (arr[j]>arr[j+1]){
        temp=arr[j];
        arr[j]=arr[j+1];
        arr[j+1]=temp;
      }
    }
  }
}
int main()
{
 testSimpleCase();
 testDataFromFile();
}
void testSimpleCase()
{
 myRational frac1(2), frac2(3, 2), frac3(6, 4), frac4(12, 8), frac5, frac6, frac7;
 cout << frac1 << " " << frac2 << " " << frac3 << " "
 << frac4 << " " << frac5 << endl;
 cout << frac1.getNumerator() << " " << frac1.getDenominator() << endl;
 // Check arithmetic operators
 cout << frac1 * frac2 << " "
 << frac1 + frac3 << " "
 << frac2 - frac1 << " "
 << frac3 / frac2 << endl;
 // Check comparison operators
 cout << ((frac1 < frac2) ? 1 : 0) << " "
<< ((frac1 <= frac2) ? 1 : 0) << " "
<< ((frac1 > frac2) ? 1 : 0) << " "
<< ((frac1 >= frac2) ? 1 : 0) << " "
<< ((frac1 == frac2) ? 1 : 0) << " "
<< ((frac1 != frac2) ? 1 : 0) << " "
<< ((frac2 < frac3) ? 1 : 0) << " "
<< ((frac2 <= frac3) ? 1 : 0) << " "
<< ((frac2 > frac3) ? 1 : 0) << " "
<< ((frac2 >= frac3) ? 1 : 0) << " "
<< ((frac2 == frac3) ? 1 : 0) << " "
<< ((frac2 != frac3) ? 1 : 0) << endl;
cout << (frac6 = frac3) << " ";
cout << (frac6 += frac3) << " ";
cout << (frac6 -= frac3) << " ";
cout << (frac6 *= frac3) << " ";
cout << (frac6 /= frac3) << endl;
cout << -frac6 << endl;
frac6 = (++frac4) + 2;
frac7 = 2 + (frac4++);
cout << frac4 << " " << frac6 << " " << frac7 << endl;
frac6 = (--frac4) - 2;
frac7 = 2 - (frac4--);
cout << frac4 << " " << frac6 << " " << frac7 << endl;
cout << 2 * frac3 << " " << frac3 * 2 << " "
<< 2 / frac3 << " " << frac3 / 2 << endl;
}
void testDataFromFile()
{
  ifstream inStream;
  int numTestCases;
  inStream.open("input.txt");
  if (inStream.fail())
  {
  cerr << "Input file opening failed.\n";
  exit(1);
  }
  inStream >> numTestCases;
  int n;
  for (int i=0; i<numTestCases; i++)
  {
    inStream >> n;
    myRational r[n];
    for (int j=0; j<n; j++){
      inStream >> r[j];
    }
    bubbleSort(r, n);
    for (int j=0; j<n; j++){
      cout<<r[j]<<" ";
    }
    cout<<endl;
  }
  inStream.close();
}
