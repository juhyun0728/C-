#include<iostream>
using namespace std;

class KString {
  friend ostream& operator<<(ostream& os, const KString& s);
private:
       char *m;
  public:
    KString(){
      m = new char[1];
      m[0]='\0';
    }
    KString(const char str[]){
      m=NULL;
      cpy(str);
    }
    KString(const KString& s) : m(NULL){
      cpy(s.m);
    }
    ~KString(){
        delete[] m;
    }

 // 저장된 string 의 길이는 79자를 넘지 않도록 멤버 함수를 구현
     int size () const{
       int i;
       for (i=0; m[i]; i++);
       return i;
     } // 저장된 문자열의 길이를 반환

     KString& operator=(const KString& s){
       cpy(s.m);
       return *this;
     }
     KString operator+(const KString& s){
       int i, len1=size(), len2=s.size();
       char *s1= new char[len1+len2+1];

       for (i=0;m[i];i++) s1[i]=m[i];
       for (i=0; s.m[i];i++) s1[len1+i]=s.m[i];
       m[len1+len2]='\0';
       KString r(s1);
       delete[] s1;
       return r;
     }
     void cpy(const char str[]){
       int i=0;
       for (i=0; str[i];i++);
       if (m)
          delete[] m;
       m=new char[i+1];
       for (i=0; str[i];i++)
          m[i] = str[i];
       m[i] = '\0';
     } // str 의 내용을 m 에 복사

     void cat(const char str[]){
       int i, end = size();
       char *old = m;
       for (i=0; str[i];i++);
       m= new char[end+i+1];
       for (i=0;old[i];i++) m[i]=old[i];
       for (i=0; str[i];) m[end++]=str[i++];
       m[end]='\0';
       delete[] old;
     }  // str 의 내용을 m 의 현재 문자열에 append

     int cmp(const char str[]) const // str의 내용과 m의 내용의 사전순서 비교
      {
        int i;
        for (i=0; m[i] && str[i]; i++){
          if (m[i]<str[i]) return -1;
          else if (m[i]>str[i]) return 1;
        }
        if (str[i]) return -1;
        if (m[i]) return 1;
        return 0;
      }
     // m 의 문자열과 str 의 사전순서를 비교하여
      //str이 더 뒤면 -1, 같으면 0, 더 앞이면 1 을 반환
      void print(){
        cout<< this<< " "<< m<<endl;
      }
      
      char& operator[](int i){
        assert(0 <= i && i < size());
        return m[i];
      }

      friend bool operator<(const KString& s1, const KString& s2);
      operator char*(){
        return m;
      }
};
bool operator<(const KString& s1, const KString& s2){
  if (s1.cmp(s2.m)<0)
    return true;
  else return false;
}
ostream& operator<<(ostream& os, const KString& s){
  os << s.m;
  return os;
}

KString foo(KString s){
  return s;
}
int main(){
  KString a("sky"), b("lake"), c;
  cout<<"a="<<a<<" b="<<b<<" c="<<c<<endl;
  cout<<"a[2]="<<a[2]<<endl;
  a[2]='i';
  cout<<"a[2]="<<a[2]<<endl;
  cout<<"a<b="<<(a<b)<<endl;
  char *ptr = (char *)a;
  cout<<"ptr="<<ptr<<endl;
  c=(KString)ptr;
  cout<<"a="<<a<<" b="<<b<<" c="<<c<<endl;
};
